def s(dna):
  count={}
  for c in dna:
    count[c]=count.setdefault(c, 0)+1
  return count



def dna2rna(dna):
  rna=""
  for symbol in dna:
    if symbol is "T":
      rna=rna+"U"
    else:
      rna=rna+symbol
  return rna


def reverse_complement(dna):
  x=dna[::-1]
  reverse=''
  for symbol in x:
      if symbol == 'A':
          reverse=reverse+'T'
      elif symbol == 'T':
          reverse=reverse+'A'
      elif symbol== 'C':
          reverse=reverse+'G'
      elif symbol== 'G':
          reverse=reverse+'C'
      elif symbol== 'U':
          reverse=reverse+'A'
      else:
        reverse=reverse+symbol
  return reverse

def mendels_law(hom, het, rec):
  total=hom+het+rec
  a=0
  b=0
  sum=0
  for a in range (0,hom+het+rec-1):
    b=b+1
    sum+=b
    a=a+1

  total_allele=sum*4
  i=0
  n=0
  hom_dominant=0
  het_dominant=0
  for i in range (0,hom):
    n=n+1
    hom_dominant=hom_dominant+4*(total-n)
    i+=1
  j=0
  o=0
  for j in range (0,het):
    o=o+1
    het_dominant+=3*(het-o)+2*rec
    j=j+1
  #print(hom_dominant)
  #print(het_dominant)
  #print(total_allele)
  return (het_dominant+hom_dominant)/total_allele

def fibonacci_rabbits(n,k):
    f1 = 1 # babby rabbits
    f2 = 1 # adult rabbits
    for i in range(n-1):
        temp = f1
        f1 = (f2 * k) + f1
        f2 = temp
    print (f2)

def gc_content(dna_list):
    ans = []
    for i in range(len(dna_list)):
        ans.append(0)
    for i in range(len(dna_list)):
        for element in range(len(dna_list[i])):
            if(dna_list[i][element] == "G" or dna_list[i][element] == "C"):
                ans[i] += 1
    return (ans.index(max(ans)), 100* max(ans) / len(dna_list[ans.index(max(ans))]))

def rna2codon(rna):
    genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',
        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',
        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',
        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',
        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
        'UAU': 'Y', 'UAC': 'Y', 'CAU': 'H', 'CAC': 'H', 
        'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
        'UGU': 'C', 'UGC': 'C', 'UGG': 'W',
        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }

    ans = ""
    for i in range(0,len(rna),3):
        triplet = rna[i:i+3]
        if triplet in genetic_code:
            ans += genetic_code[triplet]
    return ans
    
def locate_substring(dna_snippet, dna): 
    ans = []
    for i in range(len(dna)):
        if dna.startswith(dna_snippet,i):
            ans.append(i)
    return ans

def hamming_dist(dna1,dna2):
    count = 0
    for i in range(len(dna1):
      if dna1[i] != dna2[i]:
        count += 1
      else:
        count = count
    return count

def count_dom_phenotype(genotypes):
  count = 0
  order = 1
  for percent_dom in genotypes:
    if order <= 3:
      count += percent_dom + percent_dom
    elif order = 4:
      count += percent_dom + (1/2)*percent_dom
    elif order = 5:
      count += percent_dom
    else:
      count += 0
  return count

def source_rna(protein):
  genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
  count = 0
  val = ''
  var = val*num
  ans = ""
  for i in range(0,len(protein),3):
    triplet = protein[i:i+3]
    if triplet in genetic_code:
      ans += genetic_code[triplet]
  if val = genetic code:
    count += 1
  elif val = genetic code:
    count = count*var
  else:
    count += 0
  return count

def splice_rna(dna, intron_list):
  dna = ''
  intron_list = dna.split[:T]
  dna = dna - intron_list
  rna = ''
  for symbol in dna:
    if symbol == 'A':
      rna = rna + 'A'
    elif symbol == 'T':
      rna = rna + 'U' 
    elif symbol == 'G':
      rna = rna + 'G' 
    elif symbol == 'C':
      rna = rna + 'C'
  genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
  allowed_codons = set('ACGU')
  amino = ''
  for i in range (0,(int(len(rna)/3))):
    inp = rna[3*i:3*i+3]
    amino += inp
  return amino
